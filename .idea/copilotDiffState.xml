<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/basket-script.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/basket-script.js" />
              <option name="originalContent" value="const basketItems = document.getElementById(&quot;basket-items&quot;);&#10;const basket = JSON.parse(localStorage.getItem(&quot;basket&quot;)) || [];&#10;&#10;function renderBasket() {&#10;    basketItems.innerHTML = &quot;&quot;;&#10;&#10;    if (basket.length === 0) {&#10;        basketItems.innerHTML = &quot;&lt;li class='list-group-item text-center text-muted'&gt;Your basket is empty.&lt;/li&gt;&quot;;&#10;        &#10;        return;&#10;    }&#10;&#10;    basket.forEach((item, index) =&gt; {&#10;        const li = document.createElement(&quot;li&quot;);&#10;        li.className = &quot;list-group-item d-flex align-items-center justify-content-between basket-item&quot;;&#10;        li.innerHTML = `&#10;            &lt;div class=&quot;d-flex align-items-center gap-3&quot;&gt;&#10;                &lt;img src=&quot;${item.imgSrc}&quot; class=&quot;item-img&quot; alt=&quot;${item.title}&quot;&gt;&#10;                &lt;div&gt;&#10;                &#10;                    &lt;h6 class=&quot;mb-1&quot;&gt;${item.title}&lt;/h6&gt;&#10;                    &lt;p class=&quot;text-success mb-0&quot;&gt;${item.price}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;button class=&quot;btn btn-sm btn-outline-danger&quot; onclick=&quot;removeItem(${index})&quot;&gt;Remove&lt;/button&gt;&#10;        `;&#10;        basketItems.appendChild(li);&#10;    });&#10;}&#10;&#10;function removeItem(index) {&#10;    basket.splice(index, 1);&#10;    localStorage.setItem(&quot;basket&quot;, JSON.stringify(basket));&#10;    renderBasket();&#10;}&#10;&#10;function clearBasket() {&#10;    localStorage.removeItem(&quot;basket&quot;);&#10;    renderBasket();&#10;}&#10;&#10;renderBasket();&#10;" />
              <option name="updatedContent" value="const basketItems = document.getElementById(&quot;basket-items&quot;);&#10;const basket = JSON.parse(localStorage.getItem(&quot;basket&quot;)) || [];&#10;&#10;function renderBasket() {&#10;    basketItems.innerHTML = &quot;&quot;;&#10;&#10;    if (basket.length === 0) {&#10;        basketItems.innerHTML = &quot;&lt;li class='list-group-item text-center text-muted'&gt;Your basket is empty.&lt;/li&gt;&quot;;&#10;        return;&#10;    }&#10;&#10;    basket.forEach((item, index) =&gt; {&#10;        const li = document.createElement(&quot;li&quot;);&#10;        li.className = &quot;list-group-item d-flex align-items-center justify-content-between basket-item&quot;;&#10;        li.innerHTML = `&#10;            &lt;div class=&quot;d-flex align-items-center gap-3&quot;&gt;&#10;                &lt;img src=&quot;${item.imgSrc}&quot; class=&quot;item-img&quot; alt=&quot;${item.title}&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;h6 class=&quot;mb-1&quot;&gt;${item.title}&lt;/h6&gt;&#10;                    &lt;p class=&quot;text-success mb-0&quot;&gt;${item.price}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;d-flex align-items-center gap-2&quot;&gt;&#10;                &lt;div class=&quot;d-flex align-items-center gap-2&quot;&gt;&#10;                    &lt;button class=&quot;btn btn-sm btn-outline-secondary&quot; onclick=&quot;decreaseCount(${index})&quot;&gt;-&lt;/button&gt;&#10;                    &lt;span class=&quot;fw-bold px-2&quot;&gt;${item.count}&lt;/span&gt;&#10;                    &lt;button class=&quot;btn btn-sm btn-outline-secondary&quot; onclick=&quot;increaseCount(${index})&quot;&gt;+&lt;/button&gt;&#10;                &lt;/div&gt;&#10;                &lt;button class=&quot;btn btn-sm btn-outline-danger ms-2&quot; onclick=&quot;removeItem(${index})&quot;&gt;Remove&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        `;&#10;        basketItems.appendChild(li);&#10;    });&#10;}&#10;&#10;function increaseCount(index) {&#10;    basket[index].count++;&#10;    localStorage.setItem(&quot;basket&quot;, JSON.stringify(basket));&#10;    renderBasket();&#10;}&#10;&#10;function decreaseCount(index) {&#10;    if (basket[index].count &gt; 1) {&#10;        basket[index].count--;&#10;    } else {&#10;        basket.splice(index, 1);&#10;    }&#10;    localStorage.setItem(&quot;basket&quot;, JSON.stringify(basket));&#10;    renderBasket();&#10;}&#10;&#10;function removeItem(index) {&#10;    basket.splice(index, 1);&#10;    localStorage.setItem(&quot;basket&quot;, JSON.stringify(basket));&#10;    renderBasket();&#10;}&#10;&#10;function clearBasket() {&#10;    basket.length = 0;&#10;    localStorage.setItem(&quot;basket&quot;, JSON.stringify(basket));&#10;    renderBasket();&#10;}&#10;&#10;// Sayfa yüklendiğinde sepeti render et&#10;renderBasket();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/script.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/script.js" />
              <option name="originalContent" value="$(document).ready(function() {&#10;    let basketCount = 0;&#10;    let products = [];&#10;&#10;    toastr.options = {&#10;        &quot;closeButton&quot;: true,&#10;        &quot;progressBar&quot;: true,&#10;        &quot;positionClass&quot;: &quot;toast-bottom-right&quot;,&#10;        &quot;timeOut&quot;: &quot;2000&quot;&#10;    };&#10;&#10;    $('.btn-primary').click(function() {&#10;        const card = $(this).closest('.card');&#10;        const productId = card.attr('id');&#10;        const productName = card.find('.card-title').text();&#10;        const productPrice = card.find('.card-text').text();&#10;&#10;        products.push({&#10;            id: productId,&#10;            name: productName,&#10;            price: productPrice&#10;        });&#10;&#10;        basketCount++;&#10;        $('#basket-count').text(basketCount);&#10;&#10;        toastr.success(`${productName} added to cart!`);&#10;&#10;        $(this).removeClass('btn-primary').addClass('btn-success');&#10;        setTimeout(() =&gt; {&#10;            $(this).removeClass('btn-success').addClass('btn-primary');&#10;        }, 1000);&#10;    });&#10;&#10;    $('#basket-icon').click(function() {&#10;        if (products.length === 0) {&#10;            Swal.fire({&#10;                title: 'Empty Cart',&#10;                text: 'Your cart is empty',&#10;                icon: 'info',&#10;                confirmButtonText: 'OK'&#10;            });&#10;            return;&#10;        }&#10;&#10;        let productList = '';&#10;        products.forEach(product =&gt; {&#10;            productList += `${product.name} - ${product.price}&lt;br&gt;`;&#10;        });&#10;&#10;        Swal.fire({&#10;            title: 'Your Cart',&#10;            html: productList,&#10;            icon: 'success',&#10;            showCancelButton: true,&#10;            confirmButtonText: 'Purchase',&#10;            cancelButtonText: 'Close'&#10;        }).then((result) =&gt; {&#10;            if (result.isConfirmed) {&#10;                Swal.fire({&#10;                    title: 'Thank You!',&#10;                    text: 'Your order has been received.',&#10;                    icon: 'success',&#10;                    confirmButtonText: 'OK'&#10;                });&#10;                products = [];&#10;                basketCount = 0;&#10;                $('#basket-count').text('0');&#10;            }&#10;        });&#10;    });&#10;});" />
              <option name="updatedContent" value="$(document).ready(function() {&#10;    let basketCount = 0;&#10;    let products = [];&#10;&#10;    // localStorage'dan sepeti yükle&#10;    function loadBasket() {&#10;        const savedBasket = JSON.parse(localStorage.getItem(&quot;basket&quot;)) || [];&#10;        products = savedBasket;&#10;        // Benzersiz ürün sayısını göster (toplam adet değil)&#10;        basketCount = products.length;&#10;        $('#basket-count').text(basketCount);&#10;    }&#10;&#10;    // Sepeti localStorage'a kaydet&#10;    function saveBasket() {&#10;        localStorage.setItem(&quot;basket&quot;, JSON.stringify(products));&#10;    }&#10;&#10;    // Sayfa yüklendiğinde sepeti yükle&#10;    loadBasket();&#10;&#10;    toastr.options = {&#10;        &quot;closeButton&quot;: true,&#10;        &quot;progressBar&quot;: true,&#10;        &quot;positionClass&quot;: &quot;toast-bottom-right&quot;,&#10;        &quot;timeOut&quot;: &quot;2000&quot;&#10;    };&#10;&#10;    $('.btn-primary').click(function() {&#10;        const card = $(this).closest('.card');&#10;        const productId = card.attr('id');&#10;        const productName = card.find('.card-title').text();&#10;        const productPrice = card.find('.card-text').text();&#10;        const productImg = card.find('img').attr('src');&#10;&#10;        // Aynı ürün var mı kontrol et&#10;        const existingProductIndex = products.findIndex(product =&gt; product.id === productId);&#10;        &#10;        if (existingProductIndex !== -1) {&#10;            // Ürün zaten var, count'u artır (sepet ikonu sayısı değişmez)&#10;            products[existingProductIndex].count++;&#10;        } else {&#10;            // Yeni ürün ekle (sepet ikonu sayısı 1 artar)&#10;            products.push({&#10;                id: productId,&#10;                title: productName,&#10;                price: productPrice,&#10;                imgSrc: productImg,&#10;                count: 1&#10;            });&#10;            basketCount++;&#10;        }&#10;&#10;        $('#basket-count').text(basketCount);&#10;        saveBasket();&#10;&#10;        toastr.success(`${productName} added to cart!`);&#10;&#10;        $(this).removeClass('btn-primary').addClass('btn-success');&#10;        setTimeout(() =&gt; {&#10;            $(this).removeClass('btn-success').addClass('btn-primary');&#10;        }, 1000);&#10;    });&#10;&#10;    $('#basket-icon').click(function() {&#10;        if (products.length === 0) {&#10;            Swal.fire({&#10;                title: 'Empty Cart',&#10;                text: 'Your cart is empty',&#10;                icon: 'info',&#10;                confirmButtonText: 'OK'&#10;            });&#10;            return;&#10;        }&#10;&#10;        let productList = '';&#10;        products.forEach(product =&gt; {&#10;            productList += `${product.title} x${product.count} - ${product.price}&lt;br&gt;`;&#10;        });&#10;&#10;        Swal.fire({&#10;            title: 'Your Cart',&#10;            html: productList,&#10;            icon: 'success',&#10;            showCancelButton: true,&#10;            confirmButtonText: 'Go to Basket',&#10;            cancelButtonText: 'Close'&#10;        }).then((result) =&gt; {&#10;            if (result.isConfirmed) {&#10;                window.location.href = 'basket.html';&#10;            }&#10;        });&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>